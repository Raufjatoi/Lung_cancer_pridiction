# -*- coding: utf-8 -*-
"""lung_cancer_pridiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13cJ91rzyrPFYz-r9ONEE53n-JR14VHwy
"""

import pandas as p
import numpy as n
import seaborn as s
import matplotlib.pyplot as m
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler

data = p.read_csv("lung.csv")
#print(data.head())
#print(data.tail())
data.tail()

data["LUNG_CANCER"] = (data["LUNG_CANCER"] == "YES").astype(int)

for label in data.columns[:-1]:
  data[label] = (data[label]==2).astype(int)

data.head()

data.head()

for label in data.columns[:-1]:
  m.hist(data[data["LUNG_CANCER"]==1][label], color='red', label='have cancer', alpha=0.7, density=True)
  m.hist(data[data["LUNG_CANCER"]==0][label], color='blue', label='not cancer', alpha=0.7, density=True)
  m.title(label)
  m.ylabel("probability")
  m.xlabel(label)
  m.legend()
  m.show()

train, valid, test = n.split(data.sample(frac=1), [int(0.6*len(data)), int(0.8*len(data))])

def scale_dataset(dataframe, oversample=False):
  X = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  if oversample:
    ros = RandomOverSampler()
    X, y = ros.fit_resample(X, y)

  data = n.hstack((X, n.reshape(y, (-1, 1))))

  return data, X, y

train, X_train, y_train = scale_dataset(train, oversample=True)
valid, X_valid, y_valid = scale_dataset(valid, oversample=False)
test, X_test, y_test = scale_dataset(test, oversample=False)

"""#knn

"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report

knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(X_train, y_train)

y_pred = knn_model.predict(X_test)

print(classification_report(y_test, y_pred))

"""#nb

"""

from sklearn.naive_bayes import GaussianNB

nb_model = GaussianNB()
nb_model = nb_model.fit(X_train, y_train)

y_pred = nb_model.predict(X_test)
print(classification_report(y_test, y_pred))

"""#lr

"""

from sklearn.linear_model import LogisticRegression

lg_model = LogisticRegression()
lg_model = lg_model.fit(X_train, y_train)

y_pred = lg_model.predict(X_test)
print(classification_report(y_test, y_pred))

"""## svm"""

from sklearn.svm import SVC

svm_model = SVC()
svm_model = svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)
print(classification_report(y_test, y_pred))